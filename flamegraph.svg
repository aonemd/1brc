<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="126062074607"><g><title>[libc.so.6] (3,383,488,480 samples, 2.68%)</title><rect x="0.0003%" y="517" width="2.6840%" height="15" fill="rgb(227,0,7)" fg:x="381156" fg:w="3383488480"/><text x="0.2503%" y="527.50">[l..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,220,749,054 samples, 5.73%)</title><rect x="9.7726%" y="453" width="5.7279%" height="15" fill="rgb(217,0,24)" fg:x="12319513099" fg:w="7220749054"/><text x="10.0226%" y="463.50">&lt;core::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,220,749,054 samples, 5.73%)</title><rect x="9.7726%" y="437" width="5.7279%" height="15" fill="rgb(221,193,54)" fg:x="12319513099" fg:w="7220749054"/><text x="10.0226%" y="447.50">&lt;core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (16,391,576,714 samples, 13.00%)</title><rect x="6.3980%" y="469" width="13.0028%" height="15" fill="rgb(248,212,6)" fg:x="8065396981" fg:w="16391576714"/><text x="6.6480%" y="479.50">&lt;core::slice::iter::..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (4,916,711,542 samples, 3.90%)</title><rect x="15.5005%" y="453" width="3.9002%" height="15" fill="rgb(208,68,35)" fg:x="19540262153" fg:w="4916711542"/><text x="15.7505%" y="463.50">&lt;cor..</text></g><g><title>_1brc::main::_{{closure}} (4,916,711,542 samples, 3.90%)</title><rect x="15.5005%" y="437" width="3.9002%" height="15" fill="rgb(232,128,0)" fg:x="19540262153" fg:w="4916711542"/><text x="15.7505%" y="447.50">_1br..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,533,279,251 samples, 15.49%)</title><rect x="4.7848%" y="485" width="15.4950%" height="15" fill="rgb(207,160,47)" fg:x="6031793831" fg:w="19533279251"/><text x="5.0348%" y="495.50">&lt;core::slice::iter::Spli..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1,108,099,387 samples, 0.88%)</title><rect x="19.4007%" y="469" width="0.8790%" height="15" fill="rgb(228,23,34)" fg:x="24456973695" fg:w="1108099387"/><text x="19.6507%" y="479.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,108,099,387 samples, 0.88%)</title><rect x="19.4007%" y="453" width="0.8790%" height="15" fill="rgb(218,30,26)" fg:x="24456973695" fg:w="1108099387"/><text x="19.6507%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,108,099,387 samples, 0.88%)</title><rect x="19.4007%" y="437" width="0.8790%" height="15" fill="rgb(220,122,19)" fg:x="24456973695" fg:w="1108099387"/><text x="19.6507%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (544,585,299 samples, 0.43%)</title><rect x="19.8478%" y="421" width="0.4320%" height="15" fill="rgb(250,228,42)" fg:x="25020487783" fg:w="544585299"/><text x="20.0978%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (393,292,349 samples, 0.31%)</title><rect x="23.0902%" y="453" width="0.3120%" height="15" fill="rgb(240,193,28)" fg:x="29108038889" fg:w="393292349"/><text x="23.3402%" y="463.50"></text></g><g><title>_1brc::fast_parse_float_to_int (4,282,467,437 samples, 3.40%)</title><rect x="20.2797%" y="485" width="3.3971%" height="15" fill="rgb(216,20,37)" fg:x="25565073082" fg:w="4282467437"/><text x="20.5297%" y="495.50">_1b..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,561,516,200 samples, 1.24%)</title><rect x="22.4382%" y="469" width="1.2387%" height="15" fill="rgb(206,188,39)" fg:x="28286024319" fg:w="1561516200"/><text x="22.6882%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (346,209,281 samples, 0.27%)</title><rect x="23.4022%" y="453" width="0.2746%" height="15" fill="rgb(217,207,13)" fg:x="29501331238" fg:w="346209281"/><text x="23.6522%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (346,209,281 samples, 0.27%)</title><rect x="23.4022%" y="437" width="0.2746%" height="15" fill="rgb(231,73,38)" fg:x="29501331238" fg:w="346209281"/><text x="23.6522%" y="447.50"></text></g><g><title>core::cmp::Ord::max (339,907,656 samples, 0.27%)</title><rect x="23.6769%" y="485" width="0.2696%" height="15" fill="rgb(225,20,46)" fg:x="29847540519" fg:w="339907656"/><text x="23.9269%" y="495.50"></text></g><g><title>core::cmp::max_by (339,907,656 samples, 0.27%)</title><rect x="23.6769%" y="469" width="0.2696%" height="15" fill="rgb(210,31,41)" fg:x="29847540519" fg:w="339907656"/><text x="23.9269%" y="479.50"></text></g><g><title>core::cmp::Ord::min (145,750,549 samples, 0.12%)</title><rect x="23.9465%" y="485" width="0.1156%" height="15" fill="rgb(221,200,47)" fg:x="30187448175" fg:w="145750549"/><text x="24.1965%" y="495.50"></text></g><g><title>core::cmp::min_by (145,750,549 samples, 0.12%)</title><rect x="23.9465%" y="469" width="0.1156%" height="15" fill="rgb(226,26,5)" fg:x="30187448175" fg:w="145750549"/><text x="24.1965%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (57,112,439 samples, 0.05%)</title><rect x="24.0621%" y="485" width="0.0453%" height="15" fill="rgb(249,33,26)" fg:x="30333198724" fg:w="57112439"/><text x="24.3121%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (397,249,510 samples, 0.32%)</title><rect x="24.2231%" y="437" width="0.3151%" height="15" fill="rgb(235,183,28)" fg:x="30536194482" fg:w="397249510"/><text x="24.4731%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (152,952,704 samples, 0.12%)</title><rect x="24.7243%" y="373" width="0.1213%" height="15" fill="rgb(221,5,38)" fg:x="31168010768" fg:w="152952704"/><text x="24.9743%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (52,142,279 samples, 0.04%)</title><rect x="24.8043%" y="357" width="0.0414%" height="15" fill="rgb(247,18,42)" fg:x="31268821193" fg:w="52142279"/><text x="25.0543%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (52,142,279 samples, 0.04%)</title><rect x="24.8043%" y="341" width="0.0414%" height="15" fill="rgb(241,131,45)" fg:x="31268821193" fg:w="52142279"/><text x="25.0543%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (336,903,889 samples, 0.27%)</title><rect x="24.7243%" y="389" width="0.2673%" height="15" fill="rgb(249,31,29)" fg:x="31168010768" fg:w="336903889"/><text x="24.9743%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (183,951,185 samples, 0.15%)</title><rect x="24.8457%" y="373" width="0.1459%" height="15" fill="rgb(225,111,53)" fg:x="31320963472" fg:w="183951185"/><text x="25.0957%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (880,202,217 samples, 0.70%)</title><rect x="24.9955%" y="373" width="0.6982%" height="15" fill="rgb(238,160,17)" fg:x="31509828086" fg:w="880202217"/><text x="25.2455%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (880,202,217 samples, 0.70%)</title><rect x="24.9955%" y="357" width="0.6982%" height="15" fill="rgb(214,148,48)" fg:x="31509828086" fg:w="880202217"/><text x="25.2455%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (809,274,450 samples, 0.64%)</title><rect x="25.0518%" y="341" width="0.6420%" height="15" fill="rgb(232,36,49)" fg:x="31580755853" fg:w="809274450"/><text x="25.3018%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (809,274,450 samples, 0.64%)</title><rect x="25.0518%" y="325" width="0.6420%" height="15" fill="rgb(209,103,24)" fg:x="31580755853" fg:w="809274450"/><text x="25.3018%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (809,274,450 samples, 0.64%)</title><rect x="25.0518%" y="309" width="0.6420%" height="15" fill="rgb(229,88,8)" fg:x="31580755853" fg:w="809274450"/><text x="25.3018%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (809,274,450 samples, 0.64%)</title><rect x="25.0518%" y="293" width="0.6420%" height="15" fill="rgb(213,181,19)" fg:x="31580755853" fg:w="809274450"/><text x="25.3018%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (809,274,450 samples, 0.64%)</title><rect x="25.0518%" y="277" width="0.6420%" height="15" fill="rgb(254,191,54)" fg:x="31580755853" fg:w="809274450"/><text x="25.3018%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,051,277,311 samples, 0.83%)</title><rect x="24.9955%" y="389" width="0.8339%" height="15" fill="rgb(241,83,37)" fg:x="31509828086" fg:w="1051277311"/><text x="25.2455%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (171,075,094 samples, 0.14%)</title><rect x="25.6937%" y="373" width="0.1357%" height="15" fill="rgb(233,36,39)" fg:x="32390030303" fg:w="171075094"/><text x="25.9437%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (171,075,094 samples, 0.14%)</title><rect x="25.6937%" y="357" width="0.1357%" height="15" fill="rgb(226,3,54)" fg:x="32390030303" fg:w="171075094"/><text x="25.9437%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (171,075,094 samples, 0.14%)</title><rect x="25.6937%" y="341" width="0.1357%" height="15" fill="rgb(245,192,40)" fg:x="32390030303" fg:w="171075094"/><text x="25.9437%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (171,075,094 samples, 0.14%)</title><rect x="25.6937%" y="325" width="0.1357%" height="15" fill="rgb(238,167,29)" fg:x="32390030303" fg:w="171075094"/><text x="25.9437%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (13,201,684 samples, 0.01%)</title><rect x="25.8294%" y="389" width="0.0105%" height="15" fill="rgb(232,182,51)" fg:x="32561105397" fg:w="13201684"/><text x="26.0794%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (307,598,596 samples, 0.24%)</title><rect x="25.8399%" y="389" width="0.2440%" height="15" fill="rgb(231,60,39)" fg:x="32574307081" fg:w="307598596"/><text x="26.0899%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (61,582,887 samples, 0.05%)</title><rect x="26.0839%" y="389" width="0.0489%" height="15" fill="rgb(208,69,12)" fg:x="32881905677" fg:w="61582887"/><text x="26.3339%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (61,582,887 samples, 0.05%)</title><rect x="26.0839%" y="373" width="0.0489%" height="15" fill="rgb(235,93,37)" fg:x="32881905677" fg:w="61582887"/><text x="26.3339%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61,582,887 samples, 0.05%)</title><rect x="26.0839%" y="357" width="0.0489%" height="15" fill="rgb(213,116,39)" fg:x="32881905677" fg:w="61582887"/><text x="26.3339%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (80,706,470 samples, 0.06%)</title><rect x="26.1328%" y="389" width="0.0640%" height="15" fill="rgb(222,207,29)" fg:x="32943488564" fg:w="80706470"/><text x="26.3828%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (80,706,470 samples, 0.06%)</title><rect x="26.1328%" y="373" width="0.0640%" height="15" fill="rgb(206,96,30)" fg:x="32943488564" fg:w="80706470"/><text x="26.3828%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (2,643,839,870 samples, 2.10%)</title><rect x="24.1074%" y="485" width="2.0973%" height="15" fill="rgb(218,138,4)" fg:x="30390311163" fg:w="2643839870"/><text x="24.3574%" y="495.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,643,839,870 samples, 2.10%)</title><rect x="24.1074%" y="469" width="2.0973%" height="15" fill="rgb(250,191,14)" fg:x="30390311163" fg:w="2643839870"/><text x="24.3574%" y="479.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,643,839,870 samples, 2.10%)</title><rect x="24.1074%" y="453" width="2.0973%" height="15" fill="rgb(239,60,40)" fg:x="30390311163" fg:w="2643839870"/><text x="24.3574%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,100,707,041 samples, 1.67%)</title><rect x="24.5383%" y="437" width="1.6664%" height="15" fill="rgb(206,27,48)" fg:x="30933443992" fg:w="2100707041"/><text x="24.7883%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,100,707,041 samples, 1.67%)</title><rect x="24.5383%" y="421" width="1.6664%" height="15" fill="rgb(225,35,8)" fg:x="30933443992" fg:w="2100707041"/><text x="24.7883%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,100,707,041 samples, 1.67%)</title><rect x="24.5383%" y="405" width="1.6664%" height="15" fill="rgb(250,213,24)" fg:x="30933443992" fg:w="2100707041"/><text x="24.7883%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (477,604,985 samples, 0.38%)</title><rect x="26.2047%" y="437" width="0.3789%" height="15" fill="rgb(247,123,22)" fg:x="33034151033" fg:w="477604985"/><text x="26.4547%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (237,767,907 samples, 0.19%)</title><rect x="26.6716%" y="405" width="0.1886%" height="15" fill="rgb(231,138,38)" fg:x="33622785279" fg:w="237767907"/><text x="26.9216%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (237,767,907 samples, 0.19%)</title><rect x="26.6716%" y="389" width="0.1886%" height="15" fill="rgb(231,145,46)" fg:x="33622785279" fg:w="237767907"/><text x="26.9216%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (237,767,907 samples, 0.19%)</title><rect x="26.6716%" y="373" width="0.1886%" height="15" fill="rgb(251,118,11)" fg:x="33622785279" fg:w="237767907"/><text x="26.9216%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (237,767,907 samples, 0.19%)</title><rect x="26.6716%" y="357" width="0.1886%" height="15" fill="rgb(217,147,25)" fg:x="33622785279" fg:w="237767907"/><text x="26.9216%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (318,391,999 samples, 0.25%)</title><rect x="27.2618%" y="373" width="0.2526%" height="15" fill="rgb(247,81,37)" fg:x="34366823373" fg:w="318391999"/><text x="27.5118%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (114,550,596 samples, 0.09%)</title><rect x="27.4235%" y="357" width="0.0909%" height="15" fill="rgb(209,12,38)" fg:x="34570664776" fg:w="114550596"/><text x="27.6735%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (114,550,596 samples, 0.09%)</title><rect x="27.4235%" y="341" width="0.0909%" height="15" fill="rgb(227,1,9)" fg:x="34570664776" fg:w="114550596"/><text x="27.6735%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (583,529,500 samples, 0.46%)</title><rect x="27.2618%" y="389" width="0.4629%" height="15" fill="rgb(248,47,43)" fg:x="34366823373" fg:w="583529500"/><text x="27.5118%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (265,137,501 samples, 0.21%)</title><rect x="27.5144%" y="373" width="0.2103%" height="15" fill="rgb(221,10,30)" fg:x="34685215372" fg:w="265137501"/><text x="27.7644%" y="383.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (15,056,453 samples, 0.01%)</title><rect x="27.7247%" y="389" width="0.0119%" height="15" fill="rgb(210,229,1)" fg:x="34950352873" fg:w="15056453"/><text x="27.9747%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,202,495,036 samples, 1.75%)</title><rect x="27.7367%" y="373" width="1.7472%" height="15" fill="rgb(222,148,37)" fg:x="34965409326" fg:w="2202495036"/><text x="27.9867%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,202,495,036 samples, 1.75%)</title><rect x="27.7367%" y="357" width="1.7472%" height="15" fill="rgb(234,67,33)" fg:x="34965409326" fg:w="2202495036"/><text x="27.9867%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,113,499,691 samples, 1.68%)</title><rect x="27.8073%" y="341" width="1.6766%" height="15" fill="rgb(247,98,35)" fg:x="35054404671" fg:w="2113499691"/><text x="28.0573%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,113,499,691 samples, 1.68%)</title><rect x="27.8073%" y="325" width="1.6766%" height="15" fill="rgb(247,138,52)" fg:x="35054404671" fg:w="2113499691"/><text x="28.0573%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,113,499,691 samples, 1.68%)</title><rect x="27.8073%" y="309" width="1.6766%" height="15" fill="rgb(213,79,30)" fg:x="35054404671" fg:w="2113499691"/><text x="28.0573%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,113,499,691 samples, 1.68%)</title><rect x="27.8073%" y="293" width="1.6766%" height="15" fill="rgb(246,177,23)" fg:x="35054404671" fg:w="2113499691"/><text x="28.0573%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,113,499,691 samples, 1.68%)</title><rect x="27.8073%" y="277" width="1.6766%" height="15" fill="rgb(230,62,27)" fg:x="35054404671" fg:w="2113499691"/><text x="28.0573%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,581,960,583 samples, 2.05%)</title><rect x="27.7367%" y="389" width="2.0482%" height="15" fill="rgb(216,154,8)" fg:x="34965409326" fg:w="2581960583"/><text x="27.9867%" y="399.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (379,465,547 samples, 0.30%)</title><rect x="29.4838%" y="373" width="0.3010%" height="15" fill="rgb(244,35,45)" fg:x="37167904362" fg:w="379465547"/><text x="29.7338%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (379,465,547 samples, 0.30%)</title><rect x="29.4838%" y="357" width="0.3010%" height="15" fill="rgb(251,115,12)" fg:x="37167904362" fg:w="379465547"/><text x="29.7338%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (379,465,547 samples, 0.30%)</title><rect x="29.4838%" y="341" width="0.3010%" height="15" fill="rgb(240,54,50)" fg:x="37167904362" fg:w="379465547"/><text x="29.7338%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (379,465,547 samples, 0.30%)</title><rect x="29.4838%" y="325" width="0.3010%" height="15" fill="rgb(233,84,52)" fg:x="37167904362" fg:w="379465547"/><text x="29.7338%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (726,103,994 samples, 0.58%)</title><rect x="29.7848%" y="389" width="0.5760%" height="15" fill="rgb(207,117,47)" fg:x="37547369909" fg:w="726103994"/><text x="30.0348%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (310,352,311 samples, 0.25%)</title><rect x="30.3608%" y="389" width="0.2462%" height="15" fill="rgb(249,43,39)" fg:x="38273473903" fg:w="310352311"/><text x="30.6108%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (310,352,311 samples, 0.25%)</title><rect x="30.3608%" y="373" width="0.2462%" height="15" fill="rgb(209,38,44)" fg:x="38273473903" fg:w="310352311"/><text x="30.6108%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (310,352,311 samples, 0.25%)</title><rect x="30.3608%" y="357" width="0.2462%" height="15" fill="rgb(236,212,23)" fg:x="38273473903" fg:w="310352311"/><text x="30.6108%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (218,565,132 samples, 0.17%)</title><rect x="30.6070%" y="389" width="0.1734%" height="15" fill="rgb(242,79,21)" fg:x="38583826214" fg:w="218565132"/><text x="30.8570%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (218,565,132 samples, 0.17%)</title><rect x="30.6070%" y="373" width="0.1734%" height="15" fill="rgb(211,96,35)" fg:x="38583826214" fg:w="218565132"/><text x="30.8570%" y="383.50"></text></g><g><title>[unknown] (35,423,582,890 samples, 28.10%)</title><rect x="2.6843%" y="517" width="28.1001%" height="15" fill="rgb(253,215,40)" fg:x="3383869636" fg:w="35423582890"/><text x="2.9343%" y="527.50">[unknown]</text></g><g><title>_1brc::main (35,423,582,890 samples, 28.10%)</title><rect x="2.6843%" y="501" width="28.1001%" height="15" fill="rgb(211,81,21)" fg:x="3383869636" fg:w="35423582890"/><text x="2.9343%" y="511.50">_1brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5,773,301,493 samples, 4.58%)</title><rect x="26.2047%" y="485" width="4.5797%" height="15" fill="rgb(208,190,38)" fg:x="33034151033" fg:w="5773301493"/><text x="26.4547%" y="495.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5,773,301,493 samples, 4.58%)</title><rect x="26.2047%" y="469" width="4.5797%" height="15" fill="rgb(235,213,38)" fg:x="33034151033" fg:w="5773301493"/><text x="26.4547%" y="479.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5,773,301,493 samples, 4.58%)</title><rect x="26.2047%" y="453" width="4.5797%" height="15" fill="rgb(237,122,38)" fg:x="33034151033" fg:w="5773301493"/><text x="26.4547%" y="463.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5,295,696,508 samples, 4.20%)</title><rect x="26.5835%" y="437" width="4.2009%" height="15" fill="rgb(244,218,35)" fg:x="33511756018" fg:w="5295696508"/><text x="26.8335%" y="447.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,295,696,508 samples, 4.20%)</title><rect x="26.5835%" y="421" width="4.2009%" height="15" fill="rgb(240,68,47)" fg:x="33511756018" fg:w="5295696508"/><text x="26.8335%" y="431.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,946,899,340 samples, 3.92%)</title><rect x="26.8602%" y="405" width="3.9242%" height="15" fill="rgb(210,16,53)" fg:x="33860553186" fg:w="4946899340"/><text x="27.1102%" y="415.50">hash..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11,252,717,968 samples, 8.93%)</title><rect x="42.3057%" y="357" width="8.9263%" height="15" fill="rgb(235,124,12)" fg:x="53331413856" fg:w="11252717968"/><text x="42.5557%" y="367.50">&lt;core::ptr::n..</text></g><g><title>asm_sysvec_apic_timer_interrupt (31,254,096 samples, 0.02%)</title><rect x="51.2072%" y="341" width="0.0248%" height="15" fill="rgb(224,169,11)" fg:x="64552877728" fg:w="31254096"/><text x="51.4572%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (31,254,096 samples, 0.02%)</title><rect x="51.2072%" y="325" width="0.0248%" height="15" fill="rgb(250,166,2)" fg:x="64552877728" fg:w="31254096"/><text x="51.4572%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (26,474,857 samples, 0.02%)</title><rect x="51.2110%" y="309" width="0.0210%" height="15" fill="rgb(242,216,29)" fg:x="64557656967" fg:w="26474857"/><text x="51.4610%" y="319.50"></text></g><g><title>hrtimer_interrupt (26,474,857 samples, 0.02%)</title><rect x="51.2110%" y="293" width="0.0210%" height="15" fill="rgb(230,116,27)" fg:x="64557656967" fg:w="26474857"/><text x="51.4610%" y="303.50"></text></g><g><title>__hrtimer_run_queues (26,474,857 samples, 0.02%)</title><rect x="51.2110%" y="277" width="0.0210%" height="15" fill="rgb(228,99,48)" fg:x="64557656967" fg:w="26474857"/><text x="51.4610%" y="287.50"></text></g><g><title>tick_nohz_handler (26,474,857 samples, 0.02%)</title><rect x="51.2110%" y="261" width="0.0210%" height="15" fill="rgb(253,11,6)" fg:x="64557656967" fg:w="26474857"/><text x="51.4610%" y="271.50"></text></g><g><title>update_process_times (16,612,229 samples, 0.01%)</title><rect x="51.2188%" y="245" width="0.0132%" height="15" fill="rgb(247,143,39)" fg:x="64567519595" fg:w="16612229"/><text x="51.4688%" y="255.50"></text></g><g><title>update_process_times (15,362,335 samples, 0.01%)</title><rect x="51.2320%" y="261" width="0.0122%" height="15" fill="rgb(236,97,10)" fg:x="64584131824" fg:w="15362335"/><text x="51.4820%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,272,676,053 samples, 8.94%)</title><rect x="42.3057%" y="373" width="8.9422%" height="15" fill="rgb(233,208,19)" fg:x="53331413856" fg:w="11272676053"/><text x="42.5557%" y="383.50">&lt;core::slice:..</text></g><g><title>asm_sysvec_apic_timer_interrupt (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="357" width="0.0158%" height="15" fill="rgb(216,164,2)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="341" width="0.0158%" height="15" fill="rgb(220,129,5)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="325" width="0.0158%" height="15" fill="rgb(242,17,10)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="335.50"></text></g><g><title>hrtimer_interrupt (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="309" width="0.0158%" height="15" fill="rgb(242,107,0)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="319.50"></text></g><g><title>__hrtimer_run_queues (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="293" width="0.0158%" height="15" fill="rgb(251,28,31)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="303.50"></text></g><g><title>tick_nohz_handler (19,958,085 samples, 0.02%)</title><rect x="51.2320%" y="277" width="0.0158%" height="15" fill="rgb(233,223,10)" fg:x="64584131824" fg:w="19958085"/><text x="51.4820%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (9,399,197,110 samples, 7.46%)</title><rect x="51.2478%" y="373" width="7.4560%" height="15" fill="rgb(215,21,27)" fg:x="64604089909" fg:w="9399197110"/><text x="51.4978%" y="383.50">&lt;core::sli..</text></g><g><title>_1brc::main::_{{closure}} (9,399,197,110 samples, 7.46%)</title><rect x="51.2478%" y="357" width="7.4560%" height="15" fill="rgb(232,23,21)" fg:x="64604089909" fg:w="9399197110"/><text x="51.4978%" y="367.50">_1brc::mai..</text></g><g><title>__irqentry_text_end (14,484,551 samples, 0.01%)</title><rect x="58.7038%" y="373" width="0.0115%" height="15" fill="rgb(244,5,23)" fg:x="74003287019" fg:w="14484551"/><text x="58.9538%" y="383.50"></text></g><g><title>__pte_offset_map_lock (28,803,953 samples, 0.02%)</title><rect x="59.4600%" y="261" width="0.0228%" height="15" fill="rgb(226,81,46)" fg:x="74956451773" fg:w="28803953"/><text x="59.7100%" y="271.50"></text></g><g><title>_raw_spin_lock (15,174,355 samples, 0.01%)</title><rect x="59.4708%" y="245" width="0.0120%" height="15" fill="rgb(247,70,30)" fg:x="74970081371" fg:w="15174355"/><text x="59.7208%" y="255.50"></text></g><g><title>__rcu_read_lock (13,667,518 samples, 0.01%)</title><rect x="59.6842%" y="245" width="0.0108%" height="15" fill="rgb(212,68,19)" fg:x="75239181016" fg:w="13667518"/><text x="59.9342%" y="255.50"></text></g><g><title>srso_alias_return_thunk (18,407,107 samples, 0.01%)</title><rect x="59.6991%" y="245" width="0.0146%" height="15" fill="rgb(240,187,13)" fg:x="75257949671" fg:w="18407107"/><text x="59.9491%" y="255.50"></text></g><g><title>srso_alias_safe_ret (18,407,107 samples, 0.01%)</title><rect x="59.6991%" y="229" width="0.0146%" height="15" fill="rgb(223,113,26)" fg:x="75257949671" fg:w="18407107"/><text x="59.9491%" y="239.50"></text></g><g><title>next_uptodate_folio (314,321,633 samples, 0.25%)</title><rect x="59.4931%" y="261" width="0.2493%" height="15" fill="rgb(206,192,2)" fg:x="74998218645" fg:w="314321633"/><text x="59.7431%" y="271.50"></text></g><g><title>xas_find (36,183,500 samples, 0.03%)</title><rect x="59.7137%" y="245" width="0.0287%" height="15" fill="rgb(241,108,4)" fg:x="75276356778" fg:w="36183500"/><text x="59.9637%" y="255.50"></text></g><g><title>xas_load (31,625,656 samples, 0.03%)</title><rect x="59.7173%" y="229" width="0.0251%" height="15" fill="rgb(247,173,49)" fg:x="75280914622" fg:w="31625656"/><text x="59.9673%" y="239.50"></text></g><g><title>__mod_memcg_lruvec_state (177,460,295 samples, 0.14%)</title><rect x="60.0302%" y="213" width="0.1408%" height="15" fill="rgb(224,114,35)" fg:x="75675342880" fg:w="177460295"/><text x="60.2802%" y="223.50"></text></g><g><title>cgroup_rstat_updated (43,599,632 samples, 0.03%)</title><rect x="60.1364%" y="197" width="0.0346%" height="15" fill="rgb(245,159,27)" fg:x="75809203543" fg:w="43599632"/><text x="60.3864%" y="207.50"></text></g><g><title>__mod_node_page_state (32,675,290 samples, 0.03%)</title><rect x="60.1710%" y="213" width="0.0259%" height="15" fill="rgb(245,172,44)" fg:x="75852803175" fg:w="32675290"/><text x="60.4210%" y="223.50"></text></g><g><title>__rcu_read_lock (14,335,077 samples, 0.01%)</title><rect x="60.1969%" y="213" width="0.0114%" height="15" fill="rgb(236,23,11)" fg:x="75885478465" fg:w="14335077"/><text x="60.4469%" y="223.50"></text></g><g><title>__lruvec_stat_mod_folio (463,910,460 samples, 0.37%)</title><rect x="59.8477%" y="229" width="0.3680%" height="15" fill="rgb(205,117,38)" fg:x="75445207185" fg:w="463910460"/><text x="60.0977%" y="239.50"></text></g><g><title>__rcu_read_unlock (14,399,388 samples, 0.01%)</title><rect x="60.2157%" y="229" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="75909117645" fg:w="14399388"/><text x="60.4657%" y="239.50"></text></g><g><title>folio_add_file_rmap_ptes (511,187,721 samples, 0.41%)</title><rect x="59.8256%" y="245" width="0.4055%" height="15" fill="rgb(244,70,9)" fg:x="75417370373" fg:w="511187721"/><text x="60.0756%" y="255.50"></text></g><g><title>set_pte_range (606,043,670 samples, 0.48%)</title><rect x="59.7541%" y="261" width="0.4808%" height="15" fill="rgb(217,125,39)" fg:x="75327244218" fg:w="606043670"/><text x="60.0041%" y="271.50"></text></g><g><title>set_ptes.isra.0 (61,735,896 samples, 0.05%)</title><rect x="60.2348%" y="261" width="0.0490%" height="15" fill="rgb(235,36,10)" fg:x="75933287888" fg:w="61735896"/><text x="60.4848%" y="271.50"></text></g><g><title>filemap_map_pages (1,786,588,305 samples, 1.42%)</title><rect x="58.8777%" y="277" width="1.4172%" height="15" fill="rgb(251,123,47)" fg:x="74222407807" fg:w="1786588305"/><text x="59.1277%" y="287.50"></text></g><g><title>srso_alias_return_thunk (13,972,328 samples, 0.01%)</title><rect x="60.2838%" y="261" width="0.0111%" height="15" fill="rgb(221,13,13)" fg:x="75995023784" fg:w="13972328"/><text x="60.5338%" y="271.50"></text></g><g><title>srso_alias_safe_ret (13,972,328 samples, 0.01%)</title><rect x="60.2838%" y="245" width="0.0111%" height="15" fill="rgb(238,131,9)" fg:x="75995023784" fg:w="13972328"/><text x="60.5338%" y="255.50"></text></g><g><title>__memcg_kmem_charge_page (19,364,533 samples, 0.02%)</title><rect x="60.2986%" y="229" width="0.0154%" height="15" fill="rgb(211,50,8)" fg:x="76013658388" fg:w="19364533"/><text x="60.5486%" y="239.50"></text></g><g><title>alloc_pages_mpol_noprof (37,045,812 samples, 0.03%)</title><rect x="60.2949%" y="261" width="0.0294%" height="15" fill="rgb(245,182,24)" fg:x="76008996112" fg:w="37045812"/><text x="60.5449%" y="271.50"></text></g><g><title>__alloc_pages_noprof (37,045,812 samples, 0.03%)</title><rect x="60.2949%" y="245" width="0.0294%" height="15" fill="rgb(242,14,37)" fg:x="76008996112" fg:w="37045812"/><text x="60.5449%" y="255.50"></text></g><g><title>get_page_from_freelist (13,019,003 samples, 0.01%)</title><rect x="60.3140%" y="229" width="0.0103%" height="15" fill="rgb(246,228,12)" fg:x="76033022921" fg:w="13019003"/><text x="60.5640%" y="239.50"></text></g><g><title>do_fault (1,843,344,169 samples, 1.46%)</title><rect x="58.8660%" y="293" width="1.4623%" height="15" fill="rgb(213,55,15)" fg:x="74207668114" fg:w="1843344169"/><text x="59.1160%" y="303.50"></text></g><g><title>pte_alloc_one (42,016,171 samples, 0.03%)</title><rect x="60.2949%" y="277" width="0.0333%" height="15" fill="rgb(209,9,3)" fg:x="76008996112" fg:w="42016171"/><text x="60.5449%" y="287.50"></text></g><g><title>pte_offset_map_rw_nolock (22,651,409 samples, 0.02%)</title><rect x="60.3282%" y="293" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="76051012283" fg:w="22651409"/><text x="60.5782%" y="303.50"></text></g><g><title>__handle_mm_fault (1,960,068,496 samples, 1.55%)</title><rect x="58.7988%" y="309" width="1.5548%" height="15" fill="rgb(209,121,21)" fg:x="74123036363" fg:w="1960068496"/><text x="59.0488%" y="319.50"></text></g><g><title>count_memcg_events.constprop.0 (19,419,749 samples, 0.02%)</title><rect x="60.3537%" y="309" width="0.0154%" height="15" fill="rgb(220,109,13)" fg:x="76083104859" fg:w="19419749"/><text x="60.6037%" y="319.50"></text></g><g><title>handle_mm_fault (1,988,814,538 samples, 1.58%)</title><rect x="58.7950%" y="325" width="1.5776%" height="15" fill="rgb(232,18,1)" fg:x="74118254174" fg:w="1988814538"/><text x="59.0450%" y="335.50"></text></g><g><title>__rcu_read_lock (17,272,993 samples, 0.01%)</title><rect x="60.3828%" y="309" width="0.0137%" height="15" fill="rgb(215,41,42)" fg:x="76119799942" fg:w="17272993"/><text x="60.6328%" y="319.50"></text></g><g><title>lock_vma_under_rcu (76,153,017 samples, 0.06%)</title><rect x="60.3727%" y="325" width="0.0604%" height="15" fill="rgb(224,123,36)" fg:x="76107068712" fg:w="76153017"/><text x="60.6227%" y="335.50"></text></g><g><title>mas_walk (41,080,157 samples, 0.03%)</title><rect x="60.4005%" y="309" width="0.0326%" height="15" fill="rgb(240,125,3)" fg:x="76142141572" fg:w="41080157"/><text x="60.6505%" y="319.50"></text></g><g><title>exc_page_fault (2,174,788,259 samples, 1.73%)</title><rect x="58.7306%" y="357" width="1.7252%" height="15" fill="rgb(205,98,50)" fg:x="74037070801" fg:w="2174788259"/><text x="58.9806%" y="367.50"></text></g><g><title>do_user_addr_fault (2,155,580,113 samples, 1.71%)</title><rect x="58.7459%" y="341" width="1.7099%" height="15" fill="rgb(205,185,37)" fg:x="74056278947" fg:w="2155580113"/><text x="58.9959%" y="351.50"></text></g><g><title>up_read (28,637,331 samples, 0.02%)</title><rect x="60.4331%" y="325" width="0.0227%" height="15" fill="rgb(238,207,15)" fg:x="76183221729" fg:w="28637331"/><text x="60.6831%" y="335.50"></text></g><g><title>asm_exc_page_fault (2,222,854,136 samples, 1.76%)</title><rect x="58.7153%" y="373" width="1.7633%" height="15" fill="rgb(213,199,42)" fg:x="74017771570" fg:w="2222854136"/><text x="58.9653%" y="383.50"></text></g><g><title>__irq_exit_rcu (13,131,603 samples, 0.01%)</title><rect x="60.4827%" y="341" width="0.0104%" height="15" fill="rgb(235,201,11)" fg:x="76245696716" fg:w="13131603"/><text x="60.7327%" y="351.50"></text></g><g><title>update_process_times (20,184,263 samples, 0.02%)</title><rect x="60.4931%" y="277" width="0.0160%" height="15" fill="rgb(207,46,11)" fg:x="76258828319" fg:w="20184263"/><text x="60.7431%" y="287.50"></text></g><g><title>__hrtimer_run_queues (24,939,134 samples, 0.02%)</title><rect x="60.4931%" y="309" width="0.0198%" height="15" fill="rgb(241,35,35)" fg:x="76258828319" fg:w="24939134"/><text x="60.7431%" y="319.50"></text></g><g><title>tick_nohz_handler (24,939,134 samples, 0.02%)</title><rect x="60.4931%" y="293" width="0.0198%" height="15" fill="rgb(243,32,47)" fg:x="76258828319" fg:w="24939134"/><text x="60.7431%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (30,002,927 samples, 0.02%)</title><rect x="60.4931%" y="341" width="0.0238%" height="15" fill="rgb(247,202,23)" fg:x="76258828319" fg:w="30002927"/><text x="60.7431%" y="351.50"></text></g><g><title>hrtimer_interrupt (30,002,927 samples, 0.02%)</title><rect x="60.4931%" y="325" width="0.0238%" height="15" fill="rgb(219,102,11)" fg:x="76258828319" fg:w="30002927"/><text x="60.7431%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (53,226,759 samples, 0.04%)</title><rect x="60.4786%" y="373" width="0.0422%" height="15" fill="rgb(243,110,44)" fg:x="76240625706" fg:w="53226759"/><text x="60.7286%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (48,155,749 samples, 0.04%)</title><rect x="60.4827%" y="357" width="0.0382%" height="15" fill="rgb(222,74,54)" fg:x="76245696716" fg:w="48155749"/><text x="60.7327%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (30,279,224,491 samples, 24.02%)</title><rect x="36.5016%" y="389" width="24.0193%" height="15" fill="rgb(216,99,12)" fg:x="46014660678" fg:w="30279224491"/><text x="36.7516%" y="399.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::i..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,848,169,752 samples, 28.44%)</title><rect x="33.7082%" y="405" width="28.4369%" height="15" fill="rgb(226,22,26)" fg:x="42493221907" fg:w="35848169752"/><text x="33.9582%" y="415.50">&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2,042,510,371 samples, 1.62%)</title><rect x="60.5248%" y="389" width="1.6202%" height="15" fill="rgb(217,163,10)" fg:x="76298881288" fg:w="2042510371"/><text x="60.7748%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,042,510,371 samples, 1.62%)</title><rect x="60.5248%" y="373" width="1.6202%" height="15" fill="rgb(213,25,53)" fg:x="76298881288" fg:w="2042510371"/><text x="60.7748%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2,042,510,371 samples, 1.62%)</title><rect x="60.5248%" y="357" width="1.6202%" height="15" fill="rgb(252,105,26)" fg:x="76298881288" fg:w="2042510371"/><text x="60.7748%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (994,075,167 samples, 0.79%)</title><rect x="61.3565%" y="341" width="0.7886%" height="15" fill="rgb(220,39,43)" fg:x="77347316492" fg:w="994075167"/><text x="61.6065%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,037,390,358 samples, 0.82%)</title><rect x="69.6778%" y="373" width="0.8229%" height="15" fill="rgb(229,68,48)" fg:x="87837269739" fg:w="1037390358"/><text x="69.9278%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="357" width="0.0146%" height="15" fill="rgb(252,8,32)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="341" width="0.0146%" height="15" fill="rgb(223,20,43)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="325" width="0.0146%" height="15" fill="rgb(229,81,49)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="335.50"></text></g><g><title>hrtimer_interrupt (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="309" width="0.0146%" height="15" fill="rgb(236,28,36)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="319.50"></text></g><g><title>__hrtimer_run_queues (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="293" width="0.0146%" height="15" fill="rgb(249,185,26)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="303.50"></text></g><g><title>tick_nohz_handler (18,422,225 samples, 0.01%)</title><rect x="70.4861%" y="277" width="0.0146%" height="15" fill="rgb(249,174,33)" fg:x="88856237872" fg:w="18422225"/><text x="70.7361%" y="287.50"></text></g><g><title>update_process_times (14,030,385 samples, 0.01%)</title><rect x="70.4896%" y="261" width="0.0111%" height="15" fill="rgb(233,201,37)" fg:x="88860629712" fg:w="14030385"/><text x="70.7396%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,158,514,463 samples, 3.30%)</title><rect x="67.9945%" y="389" width="3.2988%" height="15" fill="rgb(221,78,26)" fg:x="85715270182" fg:w="4158514463"/><text x="68.2445%" y="399.50">&lt;co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (999,124,548 samples, 0.79%)</title><rect x="70.5007%" y="373" width="0.7926%" height="15" fill="rgb(250,127,30)" fg:x="88874660097" fg:w="999124548"/><text x="70.7507%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (999,124,548 samples, 0.79%)</title><rect x="70.5007%" y="357" width="0.7926%" height="15" fill="rgb(230,49,44)" fg:x="88874660097" fg:w="999124548"/><text x="70.7507%" y="367.50"></text></g><g><title>update_process_times (19,005,075 samples, 0.02%)</title><rect x="71.3046%" y="293" width="0.0151%" height="15" fill="rgb(229,67,23)" fg:x="89888001577" fg:w="19005075"/><text x="71.5546%" y="303.50"></text></g><g><title>tick_nohz_handler (37,904,131 samples, 0.03%)</title><rect x="71.2971%" y="309" width="0.0301%" height="15" fill="rgb(249,83,47)" fg:x="89878580345" fg:w="37904131"/><text x="71.5471%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (47,803,690 samples, 0.04%)</title><rect x="71.2933%" y="389" width="0.0379%" height="15" fill="rgb(215,43,3)" fg:x="89873784645" fg:w="47803690"/><text x="71.5433%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (47,803,690 samples, 0.04%)</title><rect x="71.2933%" y="373" width="0.0379%" height="15" fill="rgb(238,154,13)" fg:x="89873784645" fg:w="47803690"/><text x="71.5433%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (43,007,990 samples, 0.03%)</title><rect x="71.2971%" y="357" width="0.0341%" height="15" fill="rgb(219,56,2)" fg:x="89878580345" fg:w="43007990"/><text x="71.5471%" y="367.50"></text></g><g><title>hrtimer_interrupt (43,007,990 samples, 0.03%)</title><rect x="71.2971%" y="341" width="0.0341%" height="15" fill="rgb(233,0,4)" fg:x="89878580345" fg:w="43007990"/><text x="71.5471%" y="351.50"></text></g><g><title>__hrtimer_run_queues (43,007,990 samples, 0.03%)</title><rect x="71.2971%" y="325" width="0.0341%" height="15" fill="rgb(235,30,7)" fg:x="89878580345" fg:w="43007990"/><text x="71.5471%" y="335.50"></text></g><g><title>_1brc::fast_parse_float_to_int (11,580,198,859 samples, 9.19%)</title><rect x="62.1451%" y="405" width="9.1861%" height="15" fill="rgb(250,79,13)" fg:x="78341391659" fg:w="11580198859"/><text x="62.3951%" y="415.50">_1brc::fast_p..</text></g><g><title>core::cmp::Ord::max (388,769,557 samples, 0.31%)</title><rect x="71.3387%" y="405" width="0.3084%" height="15" fill="rgb(211,146,34)" fg:x="89931022330" fg:w="388769557"/><text x="71.5887%" y="415.50"></text></g><g><title>core::cmp::max_by (388,769,557 samples, 0.31%)</title><rect x="71.3387%" y="389" width="0.3084%" height="15" fill="rgb(228,22,38)" fg:x="89931022330" fg:w="388769557"/><text x="71.5887%" y="399.50"></text></g><g><title>core::cmp::Ord::min (155,782,017 samples, 0.12%)</title><rect x="71.6471%" y="405" width="0.1236%" height="15" fill="rgb(235,168,5)" fg:x="90319791887" fg:w="155782017"/><text x="71.8971%" y="415.50"></text></g><g><title>core::cmp::min_by (155,782,017 samples, 0.12%)</title><rect x="71.6471%" y="389" width="0.1236%" height="15" fill="rgb(221,155,16)" fg:x="90319791887" fg:w="155782017"/><text x="71.8971%" y="399.50"></text></g><g><title>__tlb_remove_folio_pages (14,449,591 samples, 0.01%)</title><rect x="72.5131%" y="181" width="0.0115%" height="15" fill="rgb(215,215,53)" fg:x="91411492962" fg:w="14449591"/><text x="72.7631%" y="191.50"></text></g><g><title>folio_mark_accessed (48,861,997 samples, 0.04%)</title><rect x="72.5322%" y="181" width="0.0388%" height="15" fill="rgb(223,4,10)" fg:x="91435632080" fg:w="48861997"/><text x="72.7822%" y="191.50"></text></g><g><title>__mod_memcg_lruvec_state (178,685,296 samples, 0.14%)</title><rect x="72.6252%" y="149" width="0.1417%" height="15" fill="rgb(234,103,6)" fg:x="91552801285" fg:w="178685296"/><text x="72.8752%" y="159.50"></text></g><g><title>__mod_node_page_state (48,713,137 samples, 0.04%)</title><rect x="72.7669%" y="149" width="0.0386%" height="15" fill="rgb(227,97,0)" fg:x="91731486581" fg:w="48713137"/><text x="73.0169%" y="159.50"></text></g><g><title>srso_alias_return_thunk (34,556,176 samples, 0.03%)</title><rect x="72.8134%" y="149" width="0.0274%" height="15" fill="rgb(234,150,53)" fg:x="91790103832" fg:w="34556176"/><text x="73.0634%" y="159.50"></text></g><g><title>__lruvec_stat_mod_folio (311,423,192 samples, 0.25%)</title><rect x="72.6017%" y="165" width="0.2470%" height="15" fill="rgb(228,201,54)" fg:x="91523187839" fg:w="311423192"/><text x="72.8517%" y="175.50"></text></g><g><title>folio_remove_rmap_ptes (364,637,647 samples, 0.29%)</title><rect x="72.5710%" y="181" width="0.2893%" height="15" fill="rgb(222,22,37)" fg:x="91484494077" fg:w="364637647"/><text x="72.8210%" y="191.50"></text></g><g><title>__rcu_read_unlock (14,520,693 samples, 0.01%)</title><rect x="72.8487%" y="165" width="0.0115%" height="15" fill="rgb(237,53,32)" fg:x="91834611031" fg:w="14520693"/><text x="73.0987%" y="175.50"></text></g><g><title>folios_put_refs (29,686,459 samples, 0.02%)</title><rect x="72.9135%" y="133" width="0.0235%" height="15" fill="rgb(233,25,53)" fg:x="91916316872" fg:w="29686459"/><text x="73.1635%" y="143.50"></text></g><g><title>tlb_flush_mmu (96,754,198 samples, 0.08%)</title><rect x="72.8681%" y="181" width="0.0768%" height="15" fill="rgb(210,40,34)" fg:x="91858976362" fg:w="96754198"/><text x="73.1181%" y="191.50"></text></g><g><title>__tlb_batch_free_encoded_pages (96,754,198 samples, 0.08%)</title><rect x="72.8681%" y="165" width="0.0768%" height="15" fill="rgb(241,220,44)" fg:x="91858976362" fg:w="96754198"/><text x="73.1181%" y="175.50"></text></g><g><title>free_pages_and_swap_cache (96,754,198 samples, 0.08%)</title><rect x="72.8681%" y="149" width="0.0768%" height="15" fill="rgb(235,28,35)" fg:x="91858976362" fg:w="96754198"/><text x="73.1181%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="405" width="1.2092%" height="15" fill="rgb(210,56,17)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="389" width="1.2092%" height="15" fill="rgb(224,130,29)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="399.50"></text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="373" width="1.2092%" height="15" fill="rgb(235,212,8)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="383.50"></text></g><g><title>__munmap (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="357" width="1.2092%" height="15" fill="rgb(223,33,50)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="341" width="1.2092%" height="15" fill="rgb(219,149,13)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="351.50"></text></g><g><title>do_syscall_64 (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="325" width="1.2092%" height="15" fill="rgb(250,156,29)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="335.50"></text></g><g><title>__x64_sys_munmap (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="309" width="1.2092%" height="15" fill="rgb(216,193,19)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="319.50"></text></g><g><title>__vm_munmap (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="293" width="1.2092%" height="15" fill="rgb(216,135,14)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="303.50"></text></g><g><title>do_vmi_munmap (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="277" width="1.2092%" height="15" fill="rgb(241,47,5)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="287.50"></text></g><g><title>do_vmi_align_munmap (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="261" width="1.2092%" height="15" fill="rgb(233,42,35)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="271.50"></text></g><g><title>vms_complete_munmap_vmas (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="245" width="1.2092%" height="15" fill="rgb(231,13,6)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="255.50"></text></g><g><title>vms_clear_ptes (1,524,391,793 samples, 1.21%)</title><rect x="71.7707%" y="229" width="1.2092%" height="15" fill="rgb(207,181,40)" fg:x="90475573904" fg:w="1524391793"/><text x="72.0207%" y="239.50"></text></g><g><title>unmap_vmas (1,514,629,659 samples, 1.20%)</title><rect x="71.7784%" y="213" width="1.2015%" height="15" fill="rgb(254,173,49)" fg:x="90485336038" fg:w="1514629659"/><text x="72.0284%" y="223.50"></text></g><g><title>unmap_page_range (1,514,629,659 samples, 1.20%)</title><rect x="71.7784%" y="197" width="1.2015%" height="15" fill="rgb(221,1,38)" fg:x="90485336038" fg:w="1514629659"/><text x="72.0284%" y="207.50"></text></g><g><title>vm_normal_page (44,235,137 samples, 0.04%)</title><rect x="72.9448%" y="181" width="0.0351%" height="15" fill="rgb(206,124,46)" fg:x="91955730560" fg:w="44235137"/><text x="73.1948%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (144,177,414 samples, 0.11%)</title><rect x="72.9799%" y="405" width="0.1144%" height="15" fill="rgb(249,21,11)" fg:x="91999965697" fg:w="144177414"/><text x="73.2299%" y="415.50"></text></g><g><title>[libc.so.6] (598,914,600 samples, 0.48%)</title><rect x="74.1927%" y="341" width="0.4751%" height="15" fill="rgb(222,201,40)" fg:x="93528867767" fg:w="598914600"/><text x="74.4427%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (117,102,797 samples, 0.09%)</title><rect x="76.3790%" y="261" width="0.0929%" height="15" fill="rgb(235,61,29)" fg:x="96285006671" fg:w="117102797"/><text x="76.6290%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (117,102,797 samples, 0.09%)</title><rect x="76.3790%" y="245" width="0.0929%" height="15" fill="rgb(219,207,3)" fg:x="96285006671" fg:w="117102797"/><text x="76.6290%" y="255.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (117,102,797 samples, 0.09%)</title><rect x="76.3790%" y="229" width="0.0929%" height="15" fill="rgb(222,56,46)" fg:x="96285006671" fg:w="117102797"/><text x="76.6290%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (117,102,797 samples, 0.09%)</title><rect x="76.3790%" y="213" width="0.0929%" height="15" fill="rgb(239,76,54)" fg:x="96285006671" fg:w="117102797"/><text x="76.6290%" y="223.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied::_{{closure}} (117,102,797 samples, 0.09%)</title><rect x="76.3790%" y="197" width="0.0929%" height="15" fill="rgb(231,124,27)" fg:x="96285006671" fg:w="117102797"/><text x="76.6290%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (261,810,794 samples, 0.21%)</title><rect x="76.4760%" y="261" width="0.2077%" height="15" fill="rgb(249,195,6)" fg:x="96407193989" fg:w="261810794"/><text x="76.7260%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (261,810,794 samples, 0.21%)</title><rect x="76.4760%" y="245" width="0.2077%" height="15" fill="rgb(237,174,47)" fg:x="96407193989" fg:w="261810794"/><text x="76.7260%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (261,810,794 samples, 0.21%)</title><rect x="76.4760%" y="229" width="0.2077%" height="15" fill="rgb(206,201,31)" fg:x="96407193989" fg:w="261810794"/><text x="76.7260%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (261,810,794 samples, 0.21%)</title><rect x="76.4760%" y="213" width="0.2077%" height="15" fill="rgb(231,57,52)" fg:x="96407193989" fg:w="261810794"/><text x="76.7260%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (181,813,614 samples, 0.14%)</title><rect x="76.5394%" y="197" width="0.1442%" height="15" fill="rgb(248,177,22)" fg:x="96487191169" fg:w="181813614"/><text x="76.7894%" y="207.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (205,984,583 samples, 0.16%)</title><rect x="76.6837%" y="245" width="0.1634%" height="15" fill="rgb(215,211,37)" fg:x="96669004783" fg:w="205984583"/><text x="76.9337%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (258,756,587 samples, 0.21%)</title><rect x="76.8471%" y="245" width="0.2053%" height="15" fill="rgb(241,128,51)" fg:x="96874989366" fg:w="258756587"/><text x="77.0971%" y="255.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2,951,906,221 samples, 2.34%)</title><rect x="74.8621%" y="277" width="2.3416%" height="15" fill="rgb(227,165,31)" fg:x="94372739845" fg:w="2951906221"/><text x="75.1121%" y="287.50">&lt;..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (655,641,283 samples, 0.52%)</title><rect x="76.6837%" y="261" width="0.5201%" height="15" fill="rgb(228,167,24)" fg:x="96669004783" fg:w="655641283"/><text x="76.9337%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (190,900,113 samples, 0.15%)</title><rect x="77.0523%" y="245" width="0.1514%" height="15" fill="rgb(228,143,12)" fg:x="97133745953" fg:w="190900113"/><text x="77.3023%" y="255.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (86,334,544 samples, 0.07%)</title><rect x="77.2037%" y="245" width="0.0685%" height="15" fill="rgb(249,149,8)" fg:x="97324646066" fg:w="86334544"/><text x="77.4537%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (111,911,861 samples, 0.09%)</title><rect x="77.2722%" y="245" width="0.0888%" height="15" fill="rgb(243,35,44)" fg:x="97410980610" fg:w="111911861"/><text x="77.5222%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (5,043,423,055 samples, 4.00%)</title><rect x="73.4042%" y="357" width="4.0007%" height="15" fill="rgb(246,89,9)" fg:x="92534854771" fg:w="5043423055"/><text x="73.6542%" y="367.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (3,450,495,459 samples, 2.74%)</title><rect x="74.6678%" y="341" width="2.7371%" height="15" fill="rgb(233,213,13)" fg:x="94127782367" fg:w="3450495459"/><text x="74.9178%" y="351.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,205,537,981 samples, 2.54%)</title><rect x="74.8621%" y="325" width="2.5428%" height="15" fill="rgb(233,141,41)" fg:x="94372739845" fg:w="3205537981"/><text x="75.1121%" y="335.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,205,537,981 samples, 2.54%)</title><rect x="74.8621%" y="309" width="2.5428%" height="15" fill="rgb(239,167,4)" fg:x="94372739845" fg:w="3205537981"/><text x="75.1121%" y="319.50">co..</text></g><g><title>core::hash::Hasher::write_str (3,205,537,981 samples, 2.54%)</title><rect x="74.8621%" y="293" width="2.5428%" height="15" fill="rgb(209,217,16)" fg:x="94372739845" fg:w="3205537981"/><text x="75.1121%" y="303.50">co..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u8 (253,631,760 samples, 0.20%)</title><rect x="77.2037%" y="277" width="0.2012%" height="15" fill="rgb(219,88,35)" fg:x="97324646066" fg:w="253631760"/><text x="77.4537%" y="287.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (253,631,760 samples, 0.20%)</title><rect x="77.2037%" y="261" width="0.2012%" height="15" fill="rgb(220,193,23)" fg:x="97324646066" fg:w="253631760"/><text x="77.4537%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (55,385,355 samples, 0.04%)</title><rect x="77.3610%" y="245" width="0.0439%" height="15" fill="rgb(230,90,52)" fg:x="97522892471" fg:w="55385355"/><text x="77.6110%" y="255.50"></text></g><g><title>tick_nohz_handler (14,494,720 samples, 0.01%)</title><rect x="78.2302%" y="197" width="0.0115%" height="15" fill="rgb(252,106,19)" fg:x="98618626233" fg:w="14494720"/><text x="78.4802%" y="207.50"></text></g><g><title>__hrtimer_run_queues (23,535,199 samples, 0.02%)</title><rect x="78.2265%" y="213" width="0.0187%" height="15" fill="rgb(206,74,20)" fg:x="98613910926" fg:w="23535199"/><text x="78.4765%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (32,904,101 samples, 0.03%)</title><rect x="78.2228%" y="277" width="0.0261%" height="15" fill="rgb(230,138,44)" fg:x="98609313625" fg:w="32904101"/><text x="78.4728%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (32,904,101 samples, 0.03%)</title><rect x="78.2228%" y="261" width="0.0261%" height="15" fill="rgb(235,182,43)" fg:x="98609313625" fg:w="32904101"/><text x="78.4728%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (28,306,800 samples, 0.02%)</title><rect x="78.2265%" y="245" width="0.0225%" height="15" fill="rgb(242,16,51)" fg:x="98613910926" fg:w="28306800"/><text x="78.4765%" y="255.50"></text></g><g><title>hrtimer_interrupt (28,306,800 samples, 0.02%)</title><rect x="78.2265%" y="229" width="0.0225%" height="15" fill="rgb(248,9,4)" fg:x="98613910926" fg:w="28306800"/><text x="78.4765%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (589,202,173 samples, 0.47%)</title><rect x="77.9092%" y="293" width="0.4674%" height="15" fill="rgb(210,31,22)" fg:x="98213980773" fg:w="589202173"/><text x="78.1592%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (160,965,220 samples, 0.13%)</title><rect x="78.2489%" y="277" width="0.1277%" height="15" fill="rgb(239,54,39)" fg:x="98642217726" fg:w="160965220"/><text x="78.4989%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (160,965,220 samples, 0.13%)</title><rect x="78.2489%" y="261" width="0.1277%" height="15" fill="rgb(230,99,41)" fg:x="98642217726" fg:w="160965220"/><text x="78.4989%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,059,883,646 samples, 0.84%)</title><rect x="77.9092%" y="309" width="0.8408%" height="15" fill="rgb(253,106,12)" fg:x="98213980773" fg:w="1059883646"/><text x="78.1592%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (470,681,473 samples, 0.37%)</title><rect x="78.3766%" y="293" width="0.3734%" height="15" fill="rgb(213,46,41)" fg:x="98803182946" fg:w="470681473"/><text x="78.6266%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (14,537,796 samples, 0.01%)</title><rect x="78.7500%" y="309" width="0.0115%" height="15" fill="rgb(215,133,35)" fg:x="99273864419" fg:w="14537796"/><text x="79.0000%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (14,537,796 samples, 0.01%)</title><rect x="78.7500%" y="293" width="0.0115%" height="15" fill="rgb(213,28,5)" fg:x="99273864419" fg:w="14537796"/><text x="79.0000%" y="303.50"></text></g><g><title>perf_event_task_tick (13,569,496 samples, 0.01%)</title><rect x="81.3553%" y="37" width="0.0108%" height="15" fill="rgb(215,77,49)" fg:x="102558194826" fg:w="13569496"/><text x="81.6053%" y="47.50"></text></g><g><title>task_tick_fair (13,875,767 samples, 0.01%)</title><rect x="81.3775%" y="37" width="0.0110%" height="15" fill="rgb(248,100,22)" fg:x="102586180963" fg:w="13875767"/><text x="81.6275%" y="47.50"></text></g><g><title>sched_tick (46,963,521 samples, 0.04%)</title><rect x="81.3553%" y="53" width="0.0373%" height="15" fill="rgb(208,67,9)" fg:x="102558194826" fg:w="46963521"/><text x="81.6053%" y="63.50"></text></g><g><title>update_process_times (60,935,035 samples, 0.05%)</title><rect x="81.3477%" y="69" width="0.0483%" height="15" fill="rgb(219,133,21)" fg:x="102548592424" fg:w="60935035"/><text x="81.5977%" y="79.50"></text></g><g><title>__hrtimer_run_queues (79,449,591 samples, 0.06%)</title><rect x="81.3397%" y="101" width="0.0630%" height="15" fill="rgb(246,46,29)" fg:x="102538520542" fg:w="79449591"/><text x="81.5897%" y="111.50"></text></g><g><title>tick_nohz_handler (74,359,281 samples, 0.06%)</title><rect x="81.3437%" y="85" width="0.0590%" height="15" fill="rgb(246,185,52)" fg:x="102543610852" fg:w="74359281"/><text x="81.5937%" y="95.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (88,800,750 samples, 0.07%)</title><rect x="81.3363%" y="165" width="0.0704%" height="15" fill="rgb(252,136,11)" fg:x="102534286882" fg:w="88800750"/><text x="81.5863%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (88,800,750 samples, 0.07%)</title><rect x="81.3363%" y="149" width="0.0704%" height="15" fill="rgb(219,138,53)" fg:x="102534286882" fg:w="88800750"/><text x="81.5863%" y="159.50"></text></g><g><title>__sysvec_apic_timer_interrupt (84,567,090 samples, 0.07%)</title><rect x="81.3397%" y="133" width="0.0671%" height="15" fill="rgb(211,51,23)" fg:x="102538520542" fg:w="84567090"/><text x="81.5897%" y="143.50"></text></g><g><title>hrtimer_interrupt (84,567,090 samples, 0.07%)</title><rect x="81.3397%" y="117" width="0.0671%" height="15" fill="rgb(247,221,28)" fg:x="102538520542" fg:w="84567090"/><text x="81.5897%" y="127.50"></text></g><g><title>[libc.so.6] (1,068,042,125 samples, 0.85%)</title><rect x="80.5596%" y="181" width="0.8472%" height="15" fill="rgb(251,222,45)" fg:x="101555060937" fg:w="1068042125"/><text x="80.8096%" y="191.50"></text></g><g><title>sched_tick (13,255,817 samples, 0.01%)</title><rect x="81.4186%" y="69" width="0.0105%" height="15" fill="rgb(217,162,53)" fg:x="102637961183" fg:w="13255817"/><text x="81.6686%" y="79.50"></text></g><g><title>task_tick_fair (13,255,817 samples, 0.01%)</title><rect x="81.4186%" y="53" width="0.0105%" height="15" fill="rgb(229,93,14)" fg:x="102637961183" fg:w="13255817"/><text x="81.6686%" y="63.50"></text></g><g><title>__hrtimer_run_queues (27,935,905 samples, 0.02%)</title><rect x="81.4106%" y="117" width="0.0222%" height="15" fill="rgb(209,67,49)" fg:x="102627864442" fg:w="27935905"/><text x="81.6606%" y="127.50"></text></g><g><title>tick_nohz_handler (22,790,020 samples, 0.02%)</title><rect x="81.4147%" y="101" width="0.0181%" height="15" fill="rgb(213,87,29)" fg:x="102633010327" fg:w="22790020"/><text x="81.6647%" y="111.50"></text></g><g><title>update_process_times (22,790,020 samples, 0.02%)</title><rect x="81.4147%" y="85" width="0.0181%" height="15" fill="rgb(205,151,52)" fg:x="102633010327" fg:w="22790020"/><text x="81.6647%" y="95.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (37,422,885 samples, 0.03%)</title><rect x="81.4068%" y="181" width="0.0297%" height="15" fill="rgb(253,215,39)" fg:x="102623103062" fg:w="37422885"/><text x="81.6568%" y="191.50"></text></g><g><title>sysvec_apic_timer_interrupt (32,661,505 samples, 0.03%)</title><rect x="81.4106%" y="165" width="0.0259%" height="15" fill="rgb(221,220,41)" fg:x="102627864442" fg:w="32661505"/><text x="81.6606%" y="175.50"></text></g><g><title>__sysvec_apic_timer_interrupt (32,661,505 samples, 0.03%)</title><rect x="81.4106%" y="149" width="0.0259%" height="15" fill="rgb(218,133,21)" fg:x="102627864442" fg:w="32661505"/><text x="81.6606%" y="159.50"></text></g><g><title>hrtimer_interrupt (32,661,505 samples, 0.03%)</title><rect x="81.4106%" y="133" width="0.0259%" height="15" fill="rgb(221,193,43)" fg:x="102627864442" fg:w="32661505"/><text x="81.6606%" y="143.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (48,279,945 samples, 0.04%)</title><rect x="82.3385%" y="101" width="0.0383%" height="15" fill="rgb(240,128,52)" fg:x="103797650665" fg:w="48279945"/><text x="82.5885%" y="111.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (48,279,945 samples, 0.04%)</title><rect x="82.3385%" y="85" width="0.0383%" height="15" fill="rgb(253,114,12)" fg:x="103797650665" fg:w="48279945"/><text x="82.5885%" y="95.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (48,279,945 samples, 0.04%)</title><rect x="82.3385%" y="69" width="0.0383%" height="15" fill="rgb(215,223,47)" fg:x="103797650665" fg:w="48279945"/><text x="82.5885%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (48,279,945 samples, 0.04%)</title><rect x="82.3385%" y="53" width="0.0383%" height="15" fill="rgb(248,225,23)" fg:x="103797650665" fg:w="48279945"/><text x="82.5885%" y="63.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied::_{{closure}} (48,279,945 samples, 0.04%)</title><rect x="82.3385%" y="37" width="0.0383%" height="15" fill="rgb(250,108,0)" fg:x="103797650665" fg:w="48279945"/><text x="82.5885%" y="47.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (167,166,361 samples, 0.13%)</title><rect x="82.3768%" y="101" width="0.1326%" height="15" fill="rgb(228,208,7)" fg:x="103845930610" fg:w="167166361"/><text x="82.6268%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (167,166,361 samples, 0.13%)</title><rect x="82.3768%" y="85" width="0.1326%" height="15" fill="rgb(244,45,10)" fg:x="103845930610" fg:w="167166361"/><text x="82.6268%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (167,166,361 samples, 0.13%)</title><rect x="82.3768%" y="69" width="0.1326%" height="15" fill="rgb(207,125,25)" fg:x="103845930610" fg:w="167166361"/><text x="82.6268%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (167,166,361 samples, 0.13%)</title><rect x="82.3768%" y="53" width="0.1326%" height="15" fill="rgb(210,195,18)" fg:x="103845930610" fg:w="167166361"/><text x="82.6268%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (90,321,321 samples, 0.07%)</title><rect x="82.4378%" y="37" width="0.0716%" height="15" fill="rgb(249,80,12)" fg:x="103922775650" fg:w="90321321"/><text x="82.6878%" y="47.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (127,064,508 samples, 0.10%)</title><rect x="82.5094%" y="85" width="0.1008%" height="15" fill="rgb(221,65,9)" fg:x="104013096971" fg:w="127064508"/><text x="82.7594%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (211,859,270 samples, 0.17%)</title><rect x="82.6102%" y="85" width="0.1681%" height="15" fill="rgb(235,49,36)" fg:x="104140161479" fg:w="211859270"/><text x="82.8602%" y="95.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (1,581,178,576 samples, 1.25%)</title><rect x="81.6434%" y="117" width="1.2543%" height="15" fill="rgb(225,32,20)" fg:x="102921326709" fg:w="1581178576"/><text x="81.8934%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (489,408,314 samples, 0.39%)</title><rect x="82.5094%" y="101" width="0.3882%" height="15" fill="rgb(215,141,46)" fg:x="104013096971" fg:w="489408314"/><text x="82.7594%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (150,484,536 samples, 0.12%)</title><rect x="82.7783%" y="85" width="0.1194%" height="15" fill="rgb(250,160,47)" fg:x="104352020749" fg:w="150484536"/><text x="83.0283%" y="95.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (74,971,156 samples, 0.06%)</title><rect x="82.8977%" y="85" width="0.0595%" height="15" fill="rgb(216,222,40)" fg:x="104502505285" fg:w="74971156"/><text x="83.1477%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (72,011,589 samples, 0.06%)</title><rect x="82.9571%" y="85" width="0.0571%" height="15" fill="rgb(234,217,39)" fg:x="104577476441" fg:w="72011589"/><text x="83.2071%" y="95.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5,420,380,025 samples, 4.30%)</title><rect x="78.7655%" y="293" width="4.2998%" height="15" fill="rgb(207,178,40)" fg:x="99293447743" fg:w="5420380025"/><text x="79.0155%" y="303.50">hashb..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5,420,380,025 samples, 4.30%)</title><rect x="78.7655%" y="277" width="4.2998%" height="15" fill="rgb(221,136,13)" fg:x="99293447743" fg:w="5420380025"/><text x="79.0155%" y="287.50">&lt;Q as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,194,373,900 samples, 4.12%)</title><rect x="78.9448%" y="261" width="4.1205%" height="15" fill="rgb(249,199,10)" fg:x="99519453868" fg:w="5194373900"/><text x="79.1948%" y="271.50">core..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5,194,373,900 samples, 4.12%)</title><rect x="78.9448%" y="245" width="4.1205%" height="15" fill="rgb(249,222,13)" fg:x="99519453868" fg:w="5194373900"/><text x="79.1948%" y="255.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,194,373,900 samples, 4.12%)</title><rect x="78.9448%" y="229" width="4.1205%" height="15" fill="rgb(244,185,38)" fg:x="99519453868" fg:w="5194373900"/><text x="79.1948%" y="239.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,194,373,900 samples, 4.12%)</title><rect x="78.9448%" y="213" width="4.1205%" height="15" fill="rgb(236,202,9)" fg:x="99519453868" fg:w="5194373900"/><text x="79.1948%" y="223.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,194,373,900 samples, 4.12%)</title><rect x="78.9448%" y="197" width="4.1205%" height="15" fill="rgb(250,229,37)" fg:x="99519453868" fg:w="5194373900"/><text x="79.1948%" y="207.50">&lt;[A]..</text></g><g><title>core::hash::BuildHasher::hash_one (2,053,295,727 samples, 1.63%)</title><rect x="81.4365%" y="181" width="1.6288%" height="15" fill="rgb(206,174,23)" fg:x="102660532041" fg:w="2053295727"/><text x="81.6865%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,792,501,059 samples, 1.42%)</title><rect x="81.6434%" y="165" width="1.4219%" height="15" fill="rgb(211,33,43)" fg:x="102921326709" fg:w="1792501059"/><text x="81.8934%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,792,501,059 samples, 1.42%)</title><rect x="81.6434%" y="149" width="1.4219%" height="15" fill="rgb(245,58,50)" fg:x="102921326709" fg:w="1792501059"/><text x="81.8934%" y="159.50"></text></g><g><title>core::hash::Hasher::write_str (1,792,501,059 samples, 1.42%)</title><rect x="81.6434%" y="133" width="1.4219%" height="15" fill="rgb(244,68,36)" fg:x="102921326709" fg:w="1792501059"/><text x="81.8934%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u8 (211,322,483 samples, 0.17%)</title><rect x="82.8977%" y="117" width="0.1676%" height="15" fill="rgb(232,229,15)" fg:x="104502505285" fg:w="211322483"/><text x="83.1477%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (211,322,483 samples, 0.17%)</title><rect x="82.8977%" y="101" width="0.1676%" height="15" fill="rgb(254,30,23)" fg:x="104502505285" fg:w="211322483"/><text x="83.1477%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (64,339,738 samples, 0.05%)</title><rect x="83.0143%" y="85" width="0.0510%" height="15" fill="rgb(235,160,14)" fg:x="104649488030" fg:w="64339738"/><text x="83.2643%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5,873,305,431 samples, 4.66%)</title><rect x="78.7655%" y="309" width="4.6591%" height="15" fill="rgb(212,155,44)" fg:x="99293447743" fg:w="5873305431"/><text x="79.0155%" y="319.50">hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (452,925,406 samples, 0.36%)</title><rect x="83.0653%" y="293" width="0.3593%" height="15" fill="rgb(226,2,50)" fg:x="104713827768" fg:w="452925406"/><text x="83.3153%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (452,925,406 samples, 0.36%)</title><rect x="83.0653%" y="277" width="0.3593%" height="15" fill="rgb(234,177,6)" fg:x="104713827768" fg:w="452925406"/><text x="83.3153%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (452,925,406 samples, 0.36%)</title><rect x="83.0653%" y="261" width="0.3593%" height="15" fill="rgb(217,24,9)" fg:x="104713827768" fg:w="452925406"/><text x="83.3153%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (452,925,406 samples, 0.36%)</title><rect x="83.0653%" y="245" width="0.3593%" height="15" fill="rgb(220,13,46)" fg:x="104713827768" fg:w="452925406"/><text x="83.3153%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (38,628,974 samples, 0.03%)</title><rect x="83.4246%" y="309" width="0.0306%" height="15" fill="rgb(239,221,27)" fg:x="105166753174" fg:w="38628974"/><text x="83.6746%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (1,341,521,837 samples, 1.06%)</title><rect x="83.4552%" y="309" width="1.0642%" height="15" fill="rgb(222,198,25)" fg:x="105205382148" fg:w="1341521837"/><text x="83.7052%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (39,152,977 samples, 0.03%)</title><rect x="84.4883%" y="293" width="0.0311%" height="15" fill="rgb(211,99,13)" fg:x="106507751008" fg:w="39152977"/><text x="84.7383%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (39,152,977 samples, 0.03%)</title><rect x="84.4883%" y="277" width="0.0311%" height="15" fill="rgb(232,111,31)" fg:x="106507751008" fg:w="39152977"/><text x="84.7383%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (35,130,165 samples, 0.03%)</title><rect x="84.4915%" y="261" width="0.0279%" height="15" fill="rgb(245,82,37)" fg:x="106511773820" fg:w="35130165"/><text x="84.7415%" y="271.50"></text></g><g><title>hrtimer_interrupt (35,130,165 samples, 0.03%)</title><rect x="84.4915%" y="245" width="0.0279%" height="15" fill="rgb(227,149,46)" fg:x="106511773820" fg:w="35130165"/><text x="84.7415%" y="255.50"></text></g><g><title>__hrtimer_run_queues (30,039,981 samples, 0.02%)</title><rect x="84.4956%" y="229" width="0.0238%" height="15" fill="rgb(218,36,50)" fg:x="106516864004" fg:w="30039981"/><text x="84.7456%" y="239.50"></text></g><g><title>tick_nohz_handler (30,039,981 samples, 0.02%)</title><rect x="84.4956%" y="213" width="0.0238%" height="15" fill="rgb(226,80,48)" fg:x="106516864004" fg:w="30039981"/><text x="84.7456%" y="223.50"></text></g><g><title>update_process_times (30,039,981 samples, 0.02%)</title><rect x="84.4956%" y="197" width="0.0238%" height="15" fill="rgb(238,224,15)" fg:x="106516864004" fg:w="30039981"/><text x="84.7456%" y="207.50"></text></g><g><title>sched_tick (21,934,095 samples, 0.02%)</title><rect x="84.5020%" y="181" width="0.0174%" height="15" fill="rgb(241,136,10)" fg:x="106524969890" fg:w="21934095"/><text x="84.7520%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (320,711,958 samples, 0.25%)</title><rect x="84.5194%" y="309" width="0.2544%" height="15" fill="rgb(208,32,45)" fg:x="106546903985" fg:w="320711958"/><text x="84.7694%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (320,711,958 samples, 0.25%)</title><rect x="84.5194%" y="293" width="0.2544%" height="15" fill="rgb(207,135,9)" fg:x="106546903985" fg:w="320711958"/><text x="84.7694%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (320,711,958 samples, 0.25%)</title><rect x="84.5194%" y="277" width="0.2544%" height="15" fill="rgb(206,86,44)" fg:x="106546903985" fg:w="320711958"/><text x="84.7694%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (308,031,071 samples, 0.24%)</title><rect x="84.7738%" y="309" width="0.2443%" height="15" fill="rgb(245,177,15)" fg:x="106867615943" fg:w="308031071"/><text x="85.0238%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (308,031,071 samples, 0.24%)</title><rect x="84.7738%" y="293" width="0.2443%" height="15" fill="rgb(206,64,50)" fg:x="106867615943" fg:w="308031071"/><text x="85.0238%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (15,092,872,069 samples, 11.97%)</title><rect x="73.0943%" y="405" width="11.9726%" height="15" fill="rgb(234,36,40)" fg:x="92144143111" fg:w="15092872069"/><text x="73.3443%" y="415.50">std::collections::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (15,092,872,069 samples, 11.97%)</title><rect x="73.0943%" y="389" width="11.9726%" height="15" fill="rgb(213,64,8)" fg:x="92144143111" fg:w="15092872069"/><text x="73.3443%" y="399.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15,092,872,069 samples, 11.97%)</title><rect x="73.0943%" y="373" width="11.9726%" height="15" fill="rgb(210,75,36)" fg:x="92144143111" fg:w="15092872069"/><text x="73.3443%" y="383.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,658,737,354 samples, 7.66%)</title><rect x="77.4049%" y="357" width="7.6619%" height="15" fill="rgb(229,88,21)" fg:x="97578277826" fg:w="9658737354"/><text x="77.6549%" y="367.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,658,737,354 samples, 7.66%)</title><rect x="77.4049%" y="341" width="7.6619%" height="15" fill="rgb(252,204,47)" fg:x="97578277826" fg:w="9658737354"/><text x="77.6549%" y="351.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9,658,737,354 samples, 7.66%)</title><rect x="77.4049%" y="325" width="7.6619%" height="15" fill="rgb(208,77,27)" fg:x="97578277826" fg:w="9658737354"/><text x="77.6549%" y="335.50">hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (61,368,166 samples, 0.05%)</title><rect x="85.0182%" y="309" width="0.0487%" height="15" fill="rgb(221,76,26)" fg:x="107175647014" fg:w="61368166"/><text x="85.2682%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (61,368,166 samples, 0.05%)</title><rect x="85.0182%" y="293" width="0.0487%" height="15" fill="rgb(225,139,18)" fg:x="107175647014" fg:w="61368166"/><text x="85.2682%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (61,368,166 samples, 0.05%)</title><rect x="85.0182%" y="277" width="0.0487%" height="15" fill="rgb(230,137,11)" fg:x="107175647014" fg:w="61368166"/><text x="85.2682%" y="287.50"></text></g><g><title>[libc.so.6] (171,948,526 samples, 0.14%)</title><rect x="85.6964%" y="341" width="0.1364%" height="15" fill="rgb(212,28,1)" fg:x="108030655990" fg:w="171948526"/><text x="85.9464%" y="351.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (19,300,030 samples, 0.02%)</title><rect x="85.9610%" y="245" width="0.0153%" height="15" fill="rgb(248,164,17)" fg:x="108364164673" fg:w="19300030"/><text x="86.2110%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (47,585,941 samples, 0.04%)</title><rect x="85.9763%" y="245" width="0.0377%" height="15" fill="rgb(222,171,42)" fg:x="108383464703" fg:w="47585941"/><text x="86.2263%" y="255.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (235,624,902 samples, 0.19%)</title><rect x="85.8519%" y="277" width="0.1869%" height="15" fill="rgb(243,84,45)" fg:x="108226670014" fg:w="235624902"/><text x="86.1019%" y="287.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (98,130,243 samples, 0.08%)</title><rect x="85.9610%" y="261" width="0.0778%" height="15" fill="rgb(252,49,23)" fg:x="108364164673" fg:w="98130243"/><text x="86.2110%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (31,244,272 samples, 0.02%)</title><rect x="86.0140%" y="245" width="0.0248%" height="15" fill="rgb(215,19,7)" fg:x="108431050644" fg:w="31244272"/><text x="86.2640%" y="255.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (19,904,498 samples, 0.02%)</title><rect x="86.0388%" y="245" width="0.0158%" height="15" fill="rgb(238,81,41)" fg:x="108462294916" fg:w="19904498"/><text x="86.2888%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,249,557,951 samples, 0.99%)</title><rect x="85.0668%" y="357" width="0.9912%" height="15" fill="rgb(210,199,37)" fg:x="107237015180" fg:w="1249557951"/><text x="85.3168%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (283,968,615 samples, 0.23%)</title><rect x="85.8328%" y="341" width="0.2253%" height="15" fill="rgb(244,192,49)" fg:x="108202604516" fg:w="283968615"/><text x="86.0828%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (259,903,117 samples, 0.21%)</title><rect x="85.8519%" y="325" width="0.2062%" height="15" fill="rgb(226,211,11)" fg:x="108226670014" fg:w="259903117"/><text x="86.1019%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (259,903,117 samples, 0.21%)</title><rect x="85.8519%" y="309" width="0.2062%" height="15" fill="rgb(236,162,54)" fg:x="108226670014" fg:w="259903117"/><text x="86.1019%" y="319.50"></text></g><g><title>core::hash::Hasher::write_str (259,903,117 samples, 0.21%)</title><rect x="85.8519%" y="293" width="0.2062%" height="15" fill="rgb(220,229,9)" fg:x="108226670014" fg:w="259903117"/><text x="86.1019%" y="303.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u8 (24,278,215 samples, 0.02%)</title><rect x="86.0388%" y="277" width="0.0193%" height="15" fill="rgb(250,87,22)" fg:x="108462294916" fg:w="24278215"/><text x="86.2888%" y="287.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (24,278,215 samples, 0.02%)</title><rect x="86.0388%" y="261" width="0.0193%" height="15" fill="rgb(239,43,17)" fg:x="108462294916" fg:w="24278215"/><text x="86.2888%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (192,112,705 samples, 0.15%)</title><rect x="86.1319%" y="325" width="0.1524%" height="15" fill="rgb(231,177,25)" fg:x="108579686910" fg:w="192112705"/><text x="86.3819%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (192,112,705 samples, 0.15%)</title><rect x="86.1319%" y="309" width="0.1524%" height="15" fill="rgb(219,179,1)" fg:x="108579686910" fg:w="192112705"/><text x="86.3819%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (192,112,705 samples, 0.15%)</title><rect x="86.1319%" y="293" width="0.1524%" height="15" fill="rgb(238,219,53)" fg:x="108579686910" fg:w="192112705"/><text x="86.3819%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (192,112,705 samples, 0.15%)</title><rect x="86.1319%" y="277" width="0.1524%" height="15" fill="rgb(232,167,36)" fg:x="108579686910" fg:w="192112705"/><text x="86.3819%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (297,750,756 samples, 0.24%)</title><rect x="86.6567%" y="293" width="0.2362%" height="15" fill="rgb(244,19,51)" fg:x="109241208578" fg:w="297750756"/><text x="86.9067%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (118,409,778 samples, 0.09%)</title><rect x="86.7989%" y="277" width="0.0939%" height="15" fill="rgb(224,6,22)" fg:x="109420549556" fg:w="118409778"/><text x="87.0489%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (118,409,778 samples, 0.09%)</title><rect x="86.7989%" y="261" width="0.0939%" height="15" fill="rgb(224,145,5)" fg:x="109420549556" fg:w="118409778"/><text x="87.0489%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (587,450,638 samples, 0.47%)</title><rect x="86.6567%" y="309" width="0.4660%" height="15" fill="rgb(234,130,49)" fg:x="109241208578" fg:w="587450638"/><text x="86.9067%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (289,699,882 samples, 0.23%)</title><rect x="86.8929%" y="293" width="0.2298%" height="15" fill="rgb(254,6,2)" fg:x="109538959334" fg:w="289699882"/><text x="87.1429%" y="303.50"></text></g><g><title>sched_balance_trigger (13,808,353 samples, 0.01%)</title><rect x="88.8930%" y="53" width="0.0110%" height="15" fill="rgb(208,96,46)" fg:x="112060298581" fg:w="13808353"/><text x="89.1430%" y="63.50"></text></g><g><title>[libc.so.6] (266,531,546 samples, 0.21%)</title><rect x="88.6965%" y="181" width="0.2114%" height="15" fill="rgb(239,3,39)" fg:x="111812627949" fg:w="266531546"/><text x="88.9465%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (32,859,403 samples, 0.03%)</title><rect x="88.8818%" y="165" width="0.0261%" height="15" fill="rgb(233,210,1)" fg:x="112046300092" fg:w="32859403"/><text x="89.1318%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (32,859,403 samples, 0.03%)</title><rect x="88.8818%" y="149" width="0.0261%" height="15" fill="rgb(244,137,37)" fg:x="112046300092" fg:w="32859403"/><text x="89.1318%" y="159.50"></text></g><g><title>__sysvec_apic_timer_interrupt (28,547,163 samples, 0.02%)</title><rect x="88.8853%" y="133" width="0.0226%" height="15" fill="rgb(240,136,2)" fg:x="112050612332" fg:w="28547163"/><text x="89.1353%" y="143.50"></text></g><g><title>hrtimer_interrupt (28,547,163 samples, 0.02%)</title><rect x="88.8853%" y="117" width="0.0226%" height="15" fill="rgb(239,18,37)" fg:x="112050612332" fg:w="28547163"/><text x="89.1353%" y="127.50"></text></g><g><title>__hrtimer_run_queues (28,547,163 samples, 0.02%)</title><rect x="88.8853%" y="101" width="0.0226%" height="15" fill="rgb(218,185,22)" fg:x="112050612332" fg:w="28547163"/><text x="89.1353%" y="111.50"></text></g><g><title>tick_nohz_handler (18,860,914 samples, 0.01%)</title><rect x="88.8930%" y="85" width="0.0150%" height="15" fill="rgb(225,218,4)" fg:x="112060298581" fg:w="18860914"/><text x="89.1430%" y="95.50"></text></g><g><title>update_process_times (18,860,914 samples, 0.01%)</title><rect x="88.8930%" y="69" width="0.0150%" height="15" fill="rgb(230,182,32)" fg:x="112060298581" fg:w="18860914"/><text x="89.1430%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18,033,340 samples, 0.01%)</title><rect x="89.0768%" y="101" width="0.0143%" height="15" fill="rgb(242,56,43)" fg:x="112292025289" fg:w="18033340"/><text x="89.3268%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18,033,340 samples, 0.01%)</title><rect x="89.0768%" y="85" width="0.0143%" height="15" fill="rgb(233,99,24)" fg:x="112292025289" fg:w="18033340"/><text x="89.3268%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (18,033,340 samples, 0.01%)</title><rect x="89.0768%" y="69" width="0.0143%" height="15" fill="rgb(234,209,42)" fg:x="112292025289" fg:w="18033340"/><text x="89.3268%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (18,033,340 samples, 0.01%)</title><rect x="89.0768%" y="53" width="0.0143%" height="15" fill="rgb(227,7,12)" fg:x="112292025289" fg:w="18033340"/><text x="89.3268%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (14,582,512 samples, 0.01%)</title><rect x="89.0911%" y="85" width="0.0116%" height="15" fill="rgb(245,203,43)" fg:x="112310058629" fg:w="14582512"/><text x="89.3411%" y="95.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (226,859,262 samples, 0.18%)</title><rect x="88.9305%" y="117" width="0.1800%" height="15" fill="rgb(238,205,33)" fg:x="112107577981" fg:w="226859262"/><text x="89.1805%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (24,378,614 samples, 0.02%)</title><rect x="89.0911%" y="101" width="0.0193%" height="15" fill="rgb(231,56,7)" fg:x="112310058629" fg:w="24378614"/><text x="89.3411%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,524,567,565 samples, 2.00%)</title><rect x="87.1227%" y="293" width="2.0026%" height="15" fill="rgb(244,186,29)" fg:x="109828659216" fg:w="2524567565"/><text x="87.3727%" y="303.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,524,567,565 samples, 2.00%)</title><rect x="87.1227%" y="277" width="2.0026%" height="15" fill="rgb(234,111,31)" fg:x="109828659216" fg:w="2524567565"/><text x="87.3727%" y="287.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,454,592,757 samples, 1.95%)</title><rect x="87.1782%" y="261" width="1.9471%" height="15" fill="rgb(241,149,10)" fg:x="109898634024" fg:w="2454592757"/><text x="87.4282%" y="271.50">c..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,454,592,757 samples, 1.95%)</title><rect x="87.1782%" y="245" width="1.9471%" height="15" fill="rgb(249,206,44)" fg:x="109898634024" fg:w="2454592757"/><text x="87.4282%" y="255.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,454,592,757 samples, 1.95%)</title><rect x="87.1782%" y="229" width="1.9471%" height="15" fill="rgb(251,153,30)" fg:x="109898634024" fg:w="2454592757"/><text x="87.4282%" y="239.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,454,592,757 samples, 1.95%)</title><rect x="87.1782%" y="213" width="1.9471%" height="15" fill="rgb(239,152,38)" fg:x="109898634024" fg:w="2454592757"/><text x="87.4282%" y="223.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,454,592,757 samples, 1.95%)</title><rect x="87.1782%" y="197" width="1.9471%" height="15" fill="rgb(249,139,47)" fg:x="109898634024" fg:w="2454592757"/><text x="87.4282%" y="207.50">&lt;..</text></g><g><title>core::hash::BuildHasher::hash_one (274,065,088 samples, 0.22%)</title><rect x="88.9079%" y="181" width="0.2174%" height="15" fill="rgb(244,64,35)" fg:x="112079161693" fg:w="274065088"/><text x="89.1579%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (245,648,800 samples, 0.19%)</title><rect x="88.9305%" y="165" width="0.1949%" height="15" fill="rgb(216,46,15)" fg:x="112107577981" fg:w="245648800"/><text x="89.1805%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (245,648,800 samples, 0.19%)</title><rect x="88.9305%" y="149" width="0.1949%" height="15" fill="rgb(250,74,19)" fg:x="112107577981" fg:w="245648800"/><text x="89.1805%" y="159.50"></text></g><g><title>core::hash::Hasher::write_str (245,648,800 samples, 0.19%)</title><rect x="88.9305%" y="133" width="0.1949%" height="15" fill="rgb(249,42,33)" fg:x="112107577981" fg:w="245648800"/><text x="89.1805%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u8 (18,789,538 samples, 0.01%)</title><rect x="89.1104%" y="117" width="0.0149%" height="15" fill="rgb(242,149,17)" fg:x="112334437243" fg:w="18789538"/><text x="89.3604%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (18,789,538 samples, 0.01%)</title><rect x="89.1104%" y="101" width="0.0149%" height="15" fill="rgb(244,29,21)" fg:x="112334437243" fg:w="18789538"/><text x="89.3604%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,923,825,074 samples, 2.32%)</title><rect x="87.1227%" y="309" width="2.3194%" height="15" fill="rgb(220,130,37)" fg:x="109828659216" fg:w="2923825074"/><text x="87.3727%" y="319.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (399,257,509 samples, 0.32%)</title><rect x="89.1253%" y="293" width="0.3167%" height="15" fill="rgb(211,67,2)" fg:x="112353226781" fg:w="399257509"/><text x="89.3753%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (399,257,509 samples, 0.32%)</title><rect x="89.1253%" y="277" width="0.3167%" height="15" fill="rgb(235,68,52)" fg:x="112353226781" fg:w="399257509"/><text x="89.3753%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (399,257,509 samples, 0.32%)</title><rect x="89.1253%" y="261" width="0.3167%" height="15" fill="rgb(246,142,3)" fg:x="112353226781" fg:w="399257509"/><text x="89.3753%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (399,257,509 samples, 0.32%)</title><rect x="89.1253%" y="245" width="0.3167%" height="15" fill="rgb(241,25,7)" fg:x="112353226781" fg:w="399257509"/><text x="89.3753%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (1,116,113,309 samples, 0.89%)</title><rect x="89.4420%" y="309" width="0.8854%" height="15" fill="rgb(242,119,39)" fg:x="112752484290" fg:w="1116113309"/><text x="89.6920%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="293" width="0.0104%" height="15" fill="rgb(241,98,45)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="277" width="0.0104%" height="15" fill="rgb(254,28,30)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="261" width="0.0104%" height="15" fill="rgb(241,142,54)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="271.50"></text></g><g><title>hrtimer_interrupt (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="245" width="0.0104%" height="15" fill="rgb(222,85,15)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="255.50"></text></g><g><title>__hrtimer_run_queues (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="229" width="0.0104%" height="15" fill="rgb(210,85,47)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="239.50"></text></g><g><title>tick_nohz_handler (13,087,418 samples, 0.01%)</title><rect x="90.3170%" y="213" width="0.0104%" height="15" fill="rgb(224,206,25)" fg:x="113855510181" fg:w="13087418"/><text x="90.5670%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (337,445,543 samples, 0.27%)</title><rect x="90.3274%" y="309" width="0.2677%" height="15" fill="rgb(243,201,19)" fg:x="113868597599" fg:w="337445543"/><text x="90.5774%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (337,445,543 samples, 0.27%)</title><rect x="90.3274%" y="293" width="0.2677%" height="15" fill="rgb(236,59,4)" fg:x="113868597599" fg:w="337445543"/><text x="90.5774%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (337,445,543 samples, 0.27%)</title><rect x="90.3274%" y="277" width="0.2677%" height="15" fill="rgb(254,179,45)" fg:x="113868597599" fg:w="337445543"/><text x="90.5774%" y="287.50"></text></g><g><title>_start (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="517" width="59.9651%" height="15" fill="rgb(226,14,10)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="527.50">_start</text></g><g><title>__libc_start_main (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="501" width="59.9651%" height="15" fill="rgb(244,27,41)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="485" width="59.9651%" height="15" fill="rgb(235,35,32)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="495.50">[libc.so.6]</text></g><g><title>main (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="469" width="59.9651%" height="15" fill="rgb(218,68,31)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="479.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="453" width="59.9651%" height="15" fill="rgb(207,120,37)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="437" width="59.9651%" height="15" fill="rgb(227,98,0)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>_1brc::main (75,593,203,918 samples, 59.97%)</title><rect x="30.7884%" y="421" width="59.9651%" height="15" fill="rgb(207,7,3)" fg:x="38812469974" fg:w="75593203918"/><text x="31.0384%" y="431.50">_1brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7,168,658,712 samples, 5.69%)</title><rect x="85.0668%" y="405" width="5.6866%" height="15" fill="rgb(206,98,19)" fg:x="107237015180" fg:w="7168658712"/><text x="85.3168%" y="415.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7,168,658,712 samples, 5.69%)</title><rect x="85.0668%" y="389" width="5.6866%" height="15" fill="rgb(217,5,26)" fg:x="107237015180" fg:w="7168658712"/><text x="85.3168%" y="399.50">hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7,168,658,712 samples, 5.69%)</title><rect x="85.0668%" y="373" width="5.6866%" height="15" fill="rgb(235,190,38)" fg:x="107237015180" fg:w="7168658712"/><text x="85.3168%" y="383.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5,919,100,761 samples, 4.70%)</title><rect x="86.0581%" y="357" width="4.6954%" height="15" fill="rgb(247,86,24)" fg:x="108486573131" fg:w="5919100761"/><text x="86.3081%" y="367.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,919,100,761 samples, 4.70%)</title><rect x="86.0581%" y="341" width="4.6954%" height="15" fill="rgb(205,101,16)" fg:x="108486573131" fg:w="5919100761"/><text x="86.3081%" y="351.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,633,874,277 samples, 4.47%)</title><rect x="86.2843%" y="325" width="4.4691%" height="15" fill="rgb(246,168,33)" fg:x="108771799615" fg:w="5633874277"/><text x="86.5343%" y="335.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (199,630,750 samples, 0.16%)</title><rect x="90.5951%" y="309" width="0.1584%" height="15" fill="rgb(231,114,1)" fg:x="114206043142" fg:w="199630750"/><text x="90.8451%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (199,630,750 samples, 0.16%)</title><rect x="90.5951%" y="293" width="0.1584%" height="15" fill="rgb(207,184,53)" fg:x="114206043142" fg:w="199630750"/><text x="90.8451%" y="303.50"></text></g><g><title>asm_exc_page_fault (87,295,617 samples, 0.07%)</title><rect x="90.7534%" y="517" width="0.0692%" height="15" fill="rgb(224,95,51)" fg:x="114405673892" fg:w="87295617"/><text x="91.0034%" y="527.50"></text></g><g><title>sync_regs (19,388,222 samples, 0.02%)</title><rect x="90.8073%" y="501" width="0.0154%" height="15" fill="rgb(212,188,45)" fg:x="114473581287" fg:w="19388222"/><text x="91.0573%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (14,408,904 samples, 0.01%)</title><rect x="90.8227%" y="517" width="0.0114%" height="15" fill="rgb(223,154,38)" fg:x="114492969509" fg:w="14408904"/><text x="91.0727%" y="527.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (298,432,075 samples, 0.24%)</title><rect x="96.6699%" y="437" width="0.2367%" height="15" fill="rgb(251,22,52)" fg:x="121864054408" fg:w="298432075"/><text x="96.9199%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (298,432,075 samples, 0.24%)</title><rect x="96.6699%" y="421" width="0.2367%" height="15" fill="rgb(229,209,22)" fg:x="121864054408" fg:w="298432075"/><text x="96.9199%" y="431.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (298,432,075 samples, 0.24%)</title><rect x="96.6699%" y="405" width="0.2367%" height="15" fill="rgb(234,138,34)" fg:x="121864054408" fg:w="298432075"/><text x="96.9199%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (298,432,075 samples, 0.24%)</title><rect x="96.6699%" y="389" width="0.2367%" height="15" fill="rgb(212,95,11)" fg:x="121864054408" fg:w="298432075"/><text x="96.9199%" y="399.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied::_{{closure}} (298,432,075 samples, 0.24%)</title><rect x="96.6699%" y="373" width="0.2367%" height="15" fill="rgb(240,179,47)" fg:x="121864054408" fg:w="298432075"/><text x="96.9199%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (801,768,088 samples, 0.64%)</title><rect x="96.9066%" y="437" width="0.6360%" height="15" fill="rgb(240,163,11)" fg:x="122162486483" fg:w="801768088"/><text x="97.1566%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (801,768,088 samples, 0.64%)</title><rect x="96.9066%" y="421" width="0.6360%" height="15" fill="rgb(236,37,12)" fg:x="122162486483" fg:w="801768088"/><text x="97.1566%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (801,768,088 samples, 0.64%)</title><rect x="96.9066%" y="405" width="0.6360%" height="15" fill="rgb(232,164,16)" fg:x="122162486483" fg:w="801768088"/><text x="97.1566%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (801,768,088 samples, 0.64%)</title><rect x="96.9066%" y="389" width="0.6360%" height="15" fill="rgb(244,205,15)" fg:x="122162486483" fg:w="801768088"/><text x="97.1566%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (461,287,673 samples, 0.37%)</title><rect x="97.1767%" y="373" width="0.3659%" height="15" fill="rgb(223,117,47)" fg:x="122502966898" fg:w="461287673"/><text x="97.4267%" y="383.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (742,526,473 samples, 0.59%)</title><rect x="97.5426%" y="421" width="0.5890%" height="15" fill="rgb(244,107,35)" fg:x="122964254571" fg:w="742526473"/><text x="97.7926%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (714,087,306 samples, 0.57%)</title><rect x="98.1316%" y="421" width="0.5665%" height="15" fill="rgb(205,140,8)" fg:x="123706781044" fg:w="714087306"/><text x="98.3816%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (9,637,795,304 samples, 7.65%)</title><rect x="91.6676%" y="453" width="7.6453%" height="15" fill="rgb(228,84,46)" fg:x="115558085289" fg:w="9637795304"/><text x="91.9176%" y="463.50">&lt;rustc_has..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (2,231,626,022 samples, 1.77%)</title><rect x="97.5426%" y="437" width="1.7703%" height="15" fill="rgb(254,188,9)" fg:x="122964254571" fg:w="2231626022"/><text x="97.7926%" y="447.50">r..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (775,012,243 samples, 0.61%)</title><rect x="98.6981%" y="421" width="0.6148%" height="15" fill="rgb(206,112,54)" fg:x="124420868350" fg:w="775012243"/><text x="98.9481%" y="431.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (263,079,251 samples, 0.21%)</title><rect x="99.3129%" y="421" width="0.2087%" height="15" fill="rgb(216,84,49)" fg:x="125195880593" fg:w="263079251"/><text x="99.5629%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (373,788,502 samples, 0.30%)</title><rect x="99.5216%" y="421" width="0.2965%" height="15" fill="rgb(214,194,35)" fg:x="125458959844" fg:w="373788502"/><text x="99.7716%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,554,685,527 samples, 9.17%)</title><rect x="90.8341%" y="517" width="9.1659%" height="15" fill="rgb(249,28,3)" fg:x="114507378413" fg:w="11554685527"/><text x="91.0841%" y="527.50">core::hash::B..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,503,978,651 samples, 8.33%)</title><rect x="91.6676%" y="501" width="8.3324%" height="15" fill="rgb(222,56,52)" fg:x="115558085289" fg:w="10503978651"/><text x="91.9176%" y="511.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10,503,978,651 samples, 8.33%)</title><rect x="91.6676%" y="485" width="8.3324%" height="15" fill="rgb(245,217,50)" fg:x="115558085289" fg:w="10503978651"/><text x="91.9176%" y="495.50">core::hash::..</text></g><g><title>core::hash::Hasher::write_str (10,503,978,651 samples, 8.33%)</title><rect x="91.6676%" y="469" width="8.3324%" height="15" fill="rgb(213,201,24)" fg:x="115558085289" fg:w="10503978651"/><text x="91.9176%" y="479.50">core::hash::..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u8 (866,183,347 samples, 0.69%)</title><rect x="99.3129%" y="453" width="0.6871%" height="15" fill="rgb(248,116,28)" fg:x="125195880593" fg:w="866183347"/><text x="99.5629%" y="463.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (866,183,347 samples, 0.69%)</title><rect x="99.3129%" y="437" width="0.6871%" height="15" fill="rgb(219,72,43)" fg:x="125195880593" fg:w="866183347"/><text x="99.5629%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (229,315,594 samples, 0.18%)</title><rect x="99.8181%" y="421" width="0.1819%" height="15" fill="rgb(209,138,14)" fg:x="125832748346" fg:w="229315594"/><text x="100.0681%" y="431.50"></text></g><g><title>1brc (126,062,074,260 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(222,18,33)" fg:x="0" fg:w="126062074260"/><text x="0.2500%" y="543.50">1brc</text></g><g><title>all (126,062,074,607 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(213,199,7)" fg:x="0" fg:w="126062074607"/><text x="0.2500%" y="559.50"></text></g></svg></svg>